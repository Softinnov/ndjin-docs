#summary Ndjin metamodel


= Big Picture =

http://ndjin.googlecode.com/svn/trunk/docs/metamodel.png

Due to limitation of our underlying data storage model, the metamodel cannot contain inheritance.

== DataType ==

DataType are similar to classes in OO languages with few enhancements. 

A dataType has a name, belongs to a package, and contains:
  * fields: properties of the dataType
  * operationFields: equivalent to the object methods
  * states: set of state associated with this datatype
  * uiTypes: type of user interface that could be associated to this dataType
  * validatorTypes: type of data validator that could be associated to this dataType
  * serviceTypes: executable service that could be accessed via this dataType

Common dataType primitives are:

|| *Name* || *Description* ||
||Text||UTF-8 string||
||Number||any kind of numbers||
||Date||represented in milisecond since EPOC||
||File||any kind of file||


Specific dataType objects are:

|| *Name* || *Description* ||
||Object||base object inherited by any object of your application||
||Application||application dataType that is instantiated once and used has your application entry point||
||Member||dataType used to specify user level of the member of you application||


BTW you can always introspect the model (only member on your application can query the model service) and have a description of all dataType.


== States ==

 
DataType can have states. 
A dataType instance can be in a specific state and anyone can apply a transition on the instance to change its state. When a transition is apply, a set of operation can be executed. 
Those operations can generate exception and cancel transition. Each operations are transactional but the whole transition is not transactional itself for performance reason. 
If an exception occurs during a transition, the current operation is rolled back but previous one remains. To be sure to have an atomic set of operation executed in transition you can define a specific method (operationField) and execute all operation in a transation inside this method.

Common states are: Begin, Created, Stored, Edited, End

Common state transition are: New, Create, Store, Edit, Update, Cancel, View, Delete. View transition is applied when trying to read the content of an object.


== Operations == 
Operations are executed during transitions. Field operations code can be written using scripts language. Service operations are integrated in the platform.
