<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="creationCompleteHandler()" 
	xmlns:ui="net.ndjin.ecommerce.ui.*" xmlns:view="net.ndjin.ecommerce.view.*"

	>

<mx:Script>
	<![CDATA[
		import net.ndjin.ecommerce.model.Category;
		import mx.events.DynamicEvent;
		import mx.collections.ArrayCollection;
		import org.swizframework.Swiz;
		import net.ndjin.ecommerce.controller.ProductTypeController;
		import net.ndjin.ecommerce.controller.SessionController;
		import net.ndjin.ecommerce.ApplicationLanguage;
		import net.ndjin.ecommerce.model.ProductSpecific;
		import net.ndjin.ecommerce.model.Product;
		import net.ndjin.ecommerce.controller.ProductController;
		import net.ndjin.ecommerce.controller.CategoryController;
	
		[Bindable]
		[Autowire(bean="productController")]
		public var productController:ProductController;

		[Bindable]
		[Autowire(bean="categoryController")]
		public var categoryController:CategoryController;



	
		
		[Bindable(event='selectedProduct')]
		private function set selectedProduct( product:Product ):void
		{
			productController.selectedProduct = product;
		}
		private function get selectedProduct():Product
		{
			return productController.selectedProduct;
		}
		
		[Bindable(event='selectedProductSpecific')]
		private var selectedProductSpecific:ProductSpecific;
		
		private var productDetailIndex:Number;
		
		private function creationCompleteHandler():void
		{
			Swiz.addEventListener( ProductController.SELECTED_PRODUCT_EVENT, function( event:Event ):void
			{
				
				if( productController.selectedProduct != null )
				{
					productTabs.visible = true;
					productSpecificDataGrid.dataProvider = productController.selectedProduct.productSpecifics;
					productDetailIndex = 0;
					productSpecificDataGrid.selectedIndex = productDetailIndex;
				}
				else
				{
					productDataGrid.selectedIndex = -1;
					productTabs.visible = false;
				}
				dispatchEvent(new Event('selectedProduct') );
			});
			
			Swiz.addEventListener( ApplicationLanguage.DATA_LANGUAGE_UPDATED, function( event:Event ):void
			{
				productDataGrid.invalidateList();
				productSpecificDataGrid.invalidateList();
				
				
				dispatchEvent(new Event('selectedProduct') );
				
			});
		}
		
		
		
		private function newProduct():void
		{
			productDataGrid.selectedIndex = -1;
			productController.createNew();
		}
		
		private function addReference():void
		{
			var productSpecific:ProductSpecific = new ProductSpecific({reference:'', descripton: {}, price: 0 } );
			selectedProduct.productSpecifics.addItem( productSpecific );
			selectedProductSpecific = productSpecific;
			productDetailIndex = selectedProduct.productSpecifics.source.length-1;
			dispatchEvent(new Event('selectedProductSpecific') );
			productSpecificDataGrid.selectedItem = productSpecific;
			referenceTextInput.setFocus();
		}
		
		private function removeReference():void
		{
			if( selectedProduct.productSpecifics.source.length > 1 )
			{
				selectedProduct.productSpecifics.removeItemAt( selectedProduct.productSpecifics.getItemIndex( selectedProductSpecific ) );
				productDetailIndex = 0;
				selectedProductSpecific = selectedProduct.productSpecifics.getItemAt( 0 ) as ProductSpecific;
				dispatchEvent(new Event('selectedProductSpecific') );
			}

		}
		
		private function addCategory( event:DynamicEvent ):void
		{
			categoryController.addProductToCategory( selectedProduct, event.item as Category );
		}
		private function removeCategory( event:DynamicEvent ):void
		{
			categoryController.removeProductFromCategory( selectedProduct, event.item as Category );			
		}
		
		private function productTypeValueLabel( item:Object, column:DataGridColumn ):String
		{
			if( item != null && item.value ) return item.value.name;
			return null;
		}
		
		private function editSelectedProduct():void
		{
			var product:Product = productDataGrid.selectedItem as Product;
			if( product.state == "Edited" )
			{
				productController.view( product );
			}
			else
			{
				productController.edit( product );
			}		
		}
		
	]]>
</mx:Script>
	
	
	<mx:HBox horizontalAlign="center" verticalAlign="middle" width="100%" height="100%" 
		paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10" >
		<mx:VBox height="100%" horizontalAlign="center">
			
			<mx:DataGrid id="productDataGrid" dataProvider="{productController.products}" width="200" height="100%"
				change="editSelectedProduct()"
				updateComplete="productSpecificDataGrid.selectedIndex=productDetailIndex"
				>
				<mx:columns>
					<mx:DataGridColumn headerText="Name" dataField="name" />
					<mx:DataGridColumn headerText="State" dataField="state" width="50"/>
				</mx:columns>
			</mx:DataGrid>
			
			<mx:Button label="New" click="newProduct()" visible="{!productTabs.visible}"/>
		</mx:VBox>
		

		<mx:TabNavigator id="productTabs" height="100%" width="100%" visible="false" resizeToContent="true">
			<mx:Form label="Product Form" width="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off" 
				paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5">
			
				<mx:FormItem label="Product References">
				
					<mx:HBox>
						<mx:List id="productSpecificDataGrid" width="100" rowCount="3"
							change="
							productDetailIndex = productSpecificDataGrid.selectedIndex;
							selectedProductSpecific=productSpecificDataGrid.selectedItem as ProductSpecific;
							dispatchEvent(new Event('selectedProductSpecific') );"
		
							valueCommit="
							selectedProductSpecific=productSpecificDataGrid.selectedItem as ProductSpecific;
							dispatchEvent(new Event('selectedProductSpecific') );"
							
							labelField="reference"
							/>						
						<mx:VBox height="100%" horizontalAlign="center" verticalAlign="middle">
							<mx:Button label="Remove" visible="{productSpecificDataGrid.selectedItem != null &amp;&amp; selectedProduct.productSpecifics.source.length &gt; 1}"
								click="removeReference()"
								/>
							<mx:Button label="Add" click="addReference()"/>
						</mx:VBox>						
					</mx:HBox>
				</mx:FormItem>

				<mx:FormItem label="Reference">
					<mx:TextInput id="referenceTextInput" text="{selectedProductSpecific.reference}" 
						change="selectedProductSpecific.reference = (event.currentTarget as TextInput).text"/>
				</mx:FormItem>

				<mx:FormItem label="Common Name">
					<mx:TextInput text="{selectedProduct.name}"
						change="selectedProduct.name = (event.currentTarget as TextInput).text; productController.products.itemUpdated(selectedProduct)"/>
				</mx:FormItem>
				<mx:FormItem label="Common Description">
					<mx:TextArea text="{selectedProduct.description}"  change="selectedProduct.description = (event.currentTarget as TextArea).text"/>
				</mx:FormItem>
				<mx:FormItem label="Specific Description">
					<mx:TextArea text="{selectedProductSpecific.description}" change="selectedProductSpecific.description = (event.currentTarget as TextArea).text"/>
				</mx:FormItem>

				<mx:FormItem label="Pictures">
					<view:ProductImageSelector product="{selectedProduct}" />
				</mx:FormItem>
				
				<mx:FormItem label="Weight" textAlign="right">
					<mx:TextInput text="{selectedProduct.weight}" change="selectedProduct.weight = parseFloat( (event.currentTarget as TextInput).text )"/>
				</mx:FormItem>
				
				<mx:FormItem label="Tax" textAlign="right">
					<mx:TextInput text="{selectedProduct.tax}" change="selectedProduct.tax = parseFloat( (event.currentTarget as TextInput).text )"/>
				</mx:FormItem>

				<mx:FormItem label="Price" textAlign="right">
					<mx:TextInput text="{selectedProductSpecific.price}" change="selectedProductSpecific.price = parseFloat( (event.currentTarget as TextInput).text )"/>
				</mx:FormItem>


				<mx:FormItem label="Options" width="100%">
					<view:ProductOptionSelector id="productOptionSelector" productOptions="{selectedProductSpecific.productOptions}"/>
				</mx:FormItem>

				
				<mx:FormItem width="100%">
					<mx:HBox>
						<mx:Button label="Update" click="productController.update( productDataGrid.selectedItem as Product )"/>
						<mx:Button label="Cancel" click="productController.cancel( productDataGrid.selectedItem as Product )"/>
						<mx:Button label="Delete" click="productController.remove( productDataGrid.selectedItem as Product )"/>
					</mx:HBox>
				</mx:FormItem>
			</mx:Form>

			<mx:Box label="Categories Assignment" horizontalScrollPolicy="off" verticalScrollPolicy="off" verticalAlign="middle" horizontalAlign="center"
				paddingBottom="20" paddingTop="20" paddingLeft="20" paddingRight="20">
				<ui:DoubleList sourceDataProvider="{categoryController.categories}" targetDataProvider="{selectedProduct.categories}"
							addedToTarget="addCategory( event )" removedFromTarget="removeCategory( event )"
							labelField="name" idField="_id"/>
				
			</mx:Box>
	
		</mx:TabNavigator>
			
		
		
	</mx:HBox>
	
	
	
	
</mx:VBox>
